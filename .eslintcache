[{"D:\\New folder\\react project\\material-ui\\src\\index.tsx":"1","D:\\New folder\\react project\\material-ui\\src\\components\\App.tsx":"2","D:\\New folder\\react project\\material-ui\\src\\components\\ui\\Header.tsx":"3","D:\\New folder\\react project\\material-ui\\src\\components\\ui\\theme.tsx":"4","D:\\New folder\\react project\\material-ui\\src\\components\\ui\\Footer.tsx":"5","D:\\New folder\\react project\\material-ui\\src\\components\\LandingPage.tsx":"6","D:\\New folder\\react project\\material-ui\\src\\animations\\landinganimation\\data.js":"7","D:\\New folder\\react project\\material-ui\\src\\components\\ui\\ButtonArrow.tsx":"8","D:\\New folder\\react project\\material-ui\\src\\components\\ui\\CallToAction.tsx":"9","D:\\New folder\\react project\\material-ui\\src\\components\\Services.tsx":"10","D:\\New folder\\react project\\material-ui\\src\\components\\CustomSoftware.tsx":"11","D:\\New folder\\react project\\material-ui\\src\\animations\\documentsAnimation\\data.js":"12","D:\\New folder\\react project\\material-ui\\src\\animations\\uxAnimation\\data.js":"13","D:\\New folder\\react project\\material-ui\\src\\components\\MobileApp.tsx":"14","D:\\New folder\\react project\\material-ui\\src\\components\\Websites.tsx":"15","D:\\New folder\\react project\\material-ui\\src\\components\\Revolution.tsx":"16","D:\\New folder\\react project\\material-ui\\src\\components\\AboutUs.tsx":"17","D:\\New folder\\react project\\material-ui\\src\\components\\ContactUs.tsx":"18","D:\\New folder\\react project\\material-ui\\src\\components\\Estimates.tsx":"19"},{"size":370,"mtime":1610028898024,"results":"20","hashOfConfig":"21"},{"size":3757,"mtime":1610874014892,"results":"22","hashOfConfig":"21"},{"size":10296,"mtime":1610931285610,"results":"23","hashOfConfig":"21"},{"size":3073,"mtime":1610877939016,"results":"24","hashOfConfig":"21"},{"size":7781,"mtime":1610368927027,"results":"25","hashOfConfig":"21"},{"size":15563,"mtime":1610383664451,"results":"26","hashOfConfig":"21"},{"size":3941,"mtime":1610356610098,"results":"27","hashOfConfig":"21"},{"size":389,"mtime":1610285012258,"results":"28","hashOfConfig":"21"},{"size":3530,"mtime":1610718163927,"results":"29","hashOfConfig":"21"},{"size":7192,"mtime":1610417336497,"results":"30","hashOfConfig":"21"},{"size":15713,"mtime":1610548399590,"results":"31","hashOfConfig":"21"},{"size":2768,"mtime":1610532740412,"results":"32","hashOfConfig":"21"},{"size":25574,"mtime":1610532762601,"results":"33","hashOfConfig":"21"},{"size":8631,"mtime":1610532535734,"results":"34","hashOfConfig":"21"},{"size":9390,"mtime":1610547959665,"results":"35","hashOfConfig":"21"},{"size":31288,"mtime":1610632876489,"results":"36","hashOfConfig":"21"},{"size":9511,"mtime":1610640594181,"results":"37","hashOfConfig":"21"},{"size":15723,"mtime":1611240847120,"results":"38","hashOfConfig":"21"},{"size":31668,"mtime":1611322062329,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1350buk",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"D:\\New folder\\react project\\material-ui\\src\\index.tsx",[],["81","82"],"D:\\New folder\\react project\\material-ui\\src\\components\\App.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\ui\\Header.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\ui\\theme.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\ui\\Footer.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\LandingPage.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\animations\\landinganimation\\data.js",[],["83","84"],"D:\\New folder\\react project\\material-ui\\src\\components\\ui\\ButtonArrow.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\ui\\CallToAction.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\Services.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\CustomSoftware.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\animations\\documentsAnimation\\data.js",[],"D:\\New folder\\react project\\material-ui\\src\\animations\\uxAnimation\\data.js",[],"D:\\New folder\\react project\\material-ui\\src\\components\\MobileApp.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\Websites.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\Revolution.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\AboutUs.tsx",[],"D:\\New folder\\react project\\material-ui\\src\\components\\ContactUs.tsx",["85"],"D:\\New folder\\react project\\material-ui\\src\\components\\Estimates.tsx",["86","87","88","89","90","91","92"],"import React, { useState } from \"react\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport Lottie from \"react-lottie\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ButtonArrow from \"./ui/ButtonArrow\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CallToAction from \"./ui/CallToAction\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport backArrow from \"../assets/backArrow.svg\";\r\nimport forwardArrow from \"../assets/forwardArrow.svg\";\r\nimport check from \"../assets/check.svg\";\r\nimport send from \"../assets/send.svg\";\r\nimport software from \"../assets/software.svg\";\r\nimport mobile from \"../assets/mobile.svg\";\r\nimport website from \"../assets/website.svg\";\r\nimport backArrowDisabled from \"../assets/backArrowDisabled.svg\";\r\nimport forwardArrowDisabled from \"../assets/forwardArrowDisabled.svg\";\r\nimport camera from \"../assets/camera.svg\";\r\nimport upload from \"../assets/upload.svg\";\r\nimport person from \"../assets/person.svg\";\r\nimport persons from \"../assets/persons.svg\";\r\nimport people from \"../assets/people.svg\";\r\nimport info from \"../assets/info.svg\";\r\nimport bell from \"../assets/bell.svg\";\r\nimport users from \"../assets/users.svg\";\r\nimport iphone from \"../assets/iphone.svg\";\r\nimport gps from \"../assets/gps.svg\";\r\nimport customized from \"../assets/customized.svg\";\r\nimport data from \"../assets/data.svg\";\r\nimport android from \"../assets/android.svg\";\r\nimport globe from \"../assets/globe.svg\";\r\nimport biometrics from \"../assets/biometrics.svg\";\r\n\r\nimport estimateAnimation from \"../animations/estimateAnimation/data.json\";\r\n\r\nconst useStyles = makeStyles((theme: any) => ({\r\n  icon: {\r\n    width: \"12em\",\r\n    height: \"10em\",\r\n  },\r\n  estimateButton: {\r\n    ...theme.typography.estimate,\r\n    borderRadius: 50,\r\n    backgroundColor: theme.palette.common.orange,\r\n    height: 50,\r\n    width: 225,\r\n    fontSize: \"1.25rem\",\r\n    marginTop: \"5em\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.secondary.light,\r\n    },\r\n  },\r\n  message: {\r\n    border: `2px solid ${theme.palette.common.blue}`,\r\n    marginTop: \"3em\",\r\n    borderRadius: 5,\r\n    marginBottom: \"2em\",\r\n  },\r\n  specialText: {\r\n    fontFamily: \"Raleway\",\r\n    fontWeight: 700,\r\n    fontSize: \"1.5rem\",\r\n    color: theme.palette.common.orange,\r\n  },\r\n}));\r\n\r\nconst defaultQuestions = [\r\n  {\r\n    id: 1,\r\n    title: \"Which service are you interested in?\",\r\n    active: true,\r\n    subtitle: null,\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Custom Software Development\",\r\n        subtitle: null,\r\n        icon: software,\r\n        iconAlt: \"three floating screens\",\r\n        selected: false,\r\n        cost: 0,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"iOS/Android App Development\",\r\n        subtitle: null,\r\n        icon: mobile,\r\n        iconAlt: \"phones and tablet outline\",\r\n        selected: false,\r\n        cost: 100,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Website Development\",\r\n        subtitle: null,\r\n        icon: website,\r\n        iconAlt: \"computer outline\",\r\n        selected: false,\r\n        cost: 100,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst softwareQuestions = [\r\n  { ...defaultQuestions[0], active: false },\r\n  {\r\n    id: 2,\r\n    title: \"Which platforms do you need supported?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Web Application\",\r\n        subtitle: null,\r\n        icon: website,\r\n        iconAlt: \"computer outline\",\r\n        selected: false,\r\n        cost: 100,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"iOS Application\",\r\n        subtitle: null,\r\n        icon: iphone,\r\n        iconAlt: \"outline of iphone\",\r\n        selected: false,\r\n        cost: 100,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Android Application\",\r\n        subtitle: null,\r\n        icon: android,\r\n        iconAlt: \"outlines of android phone\",\r\n        selected: false,\r\n        cost: 100,\r\n      },\r\n    ],\r\n    active: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Which features do you expect to use?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Photo/Video\",\r\n        subtitle: null,\r\n        icon: camera,\r\n        iconAlt: \"camera outline\",\r\n        selected: false,\r\n        cost: 25,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"GPS\",\r\n        subtitle: null,\r\n        icon: gps,\r\n        iconAlt: \"gps pin\",\r\n        selected: false,\r\n        cost: 25,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"File Transfer\",\r\n        subtitle: null,\r\n        icon: upload,\r\n        iconAlt: \"outline of cloud with arrow pointing up\",\r\n        selected: false,\r\n        cost: 25,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Which features do you expect to use?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Users/Authentication\",\r\n        subtitle: null,\r\n        icon: users,\r\n        iconAlt: \"outline of a person with a plus sign\",\r\n        selected: false,\r\n        cost: 25,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Biometrics\",\r\n        subtitle: null,\r\n        icon: biometrics,\r\n        iconAlt: \"fingerprint\",\r\n        selected: false,\r\n        cost: 25,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Push Notifications\",\r\n        subtitle: null,\r\n        icon: bell,\r\n        iconAlt: \"outline of a bell\",\r\n        selected: false,\r\n        cost: 25,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"What type of custom features do you expect to need?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Low Complexity\",\r\n        subtitle: \"(Informational)\",\r\n        icon: info,\r\n        iconAlt: \"'i' inside a circle\",\r\n        selected: false,\r\n        cost: 25,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Medium Complexity\",\r\n        subtitle: \"(Interactive, Customizable, Realtime)\",\r\n        icon: customized,\r\n        iconAlt: \"two toggle switches\",\r\n        selected: false,\r\n        cost: 50,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"High Complexity\",\r\n        subtitle: \"(Data Modeling and Computation)\",\r\n        icon: data,\r\n        iconAlt: \"outline of line graph\",\r\n        selected: false,\r\n        cost: 100,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    title: \"How many users do you expect?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"0-10\",\r\n        subtitle: null,\r\n        icon: person,\r\n        iconAlt: \"person outline\",\r\n        selected: false,\r\n        cost: 1,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"10-100\",\r\n        subtitle: null,\r\n        icon: persons,\r\n        iconAlt: \"outline of two people\",\r\n        selected: false,\r\n        cost: 1.25,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"100+\",\r\n        subtitle: null,\r\n        icon: people,\r\n        iconAlt: \"outline of three people\",\r\n        selected: false,\r\n        cost: 1.5,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n];\r\n\r\nconst websiteQuestions = [\r\n  { ...defaultQuestions[0], active: false },\r\n  {\r\n    id: 2,\r\n    title: \"Which type of website are you wanting?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Basic\",\r\n        subtitle: \"(Informational)\",\r\n        icon: info,\r\n        iconAlt: \"person outline\",\r\n        selected: false,\r\n        cost: 100,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Interactive\",\r\n        subtitle: \"(Users, API's, Messaging)\",\r\n        icon: customized,\r\n        iconAlt: \"outline of two people\",\r\n        selected: false,\r\n        cost: 200,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"E-Commerce\",\r\n        subtitle: \"(Sales)\",\r\n        icon: globe,\r\n        iconAlt: \"outline of three people\",\r\n        selected: false,\r\n        cost: 250,\r\n      },\r\n    ],\r\n    active: true,\r\n  },\r\n];\r\n\r\nexport default function Estimate(props: any) {\r\n  const { setValue, setSelectedIndex } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [questions, setQuestions] = useState(defaultQuestions);\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailHelper, setEmailHelper] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [phoneHelper, setPhoneHelper] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [total, setTotal] = useState(0);\r\n  const [service, setService] = useState([]);\r\n  const [platforms, setPlatforms] = useState([]);\r\n  const [features, setFeatures] = useState([]);\r\n  const [customFeatures, setCustomFeatures] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [users, setUsers] = useState(\"\");\r\n\r\n  const matchesSM = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const matchesXS = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n  const matchesMD = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: estimateAnimation,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    const newQuestions = cloneDeep(questions);\r\n    const currentlyActive = newQuestions.filter((question) => question.active);\r\n    const activeIndex = currentlyActive[0].id - 1;\r\n    const nextIndex = activeIndex === 5 ? 0 : activeIndex + 1;\r\n\r\n    newQuestions[activeIndex] = { ...currentlyActive[0], active: false };\r\n    newQuestions[nextIndex] = { ...newQuestions[nextIndex], active: true };\r\n    setQuestions(newQuestions);\r\n  };\r\n  const previousQuestion = () => {\r\n    const newQuestions = cloneDeep(questions);\r\n    const currentlyActive = newQuestions.filter((question) => question.active);\r\n    const activeIndex = currentlyActive[0].id - 1;\r\n    const previousIndex = activeIndex === 0 ? 5 : activeIndex - 1;\r\n\r\n    newQuestions[activeIndex] = { ...currentlyActive[0], active: false };\r\n    newQuestions[previousIndex] = {\r\n      ...newQuestions[previousIndex],\r\n      active: true,\r\n    };\r\n    setQuestions(newQuestions);\r\n  };\r\n\r\n  const navigationPreviousDisable = () => {\r\n    const currentlyActive = questions.filter((question) => question.active);\r\n\r\n    if (currentlyActive[0].id === 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n  const navigationNextDisable = () => {\r\n    const currentlyActive = questions.filter((question) => question.active);\r\n\r\n    if (currentlyActive[0].id === questions[questions.length - 1].id) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleSelect = (id: number) => {\r\n    const newQuestions = cloneDeep(questions);\r\n    const currentlyActive = newQuestions.filter((question) => question.active);\r\n    const activeIndex = currentlyActive[0].id - 1;\r\n\r\n    const newSelected = newQuestions[activeIndex].options[id - 1];\r\n    // @ts-ignore\r\n    const previousSelected = currentlyActive[0].options.filter(\r\n      (option: any) => option.selected\r\n    );\r\n\r\n    switch (currentlyActive[0].subtitle) {\r\n      // @ts-ignore\r\n      case \"Select one.\":\r\n        if (previousSelected[0]) {\r\n          previousSelected[0].selected = !previousSelected[0].selected;\r\n        }\r\n        newSelected.selected = !newSelected.selected;\r\n        break;\r\n      default:\r\n        newSelected.selected = !newSelected.selected;\r\n        break;\r\n    }\r\n\r\n    switch (newSelected.title) {\r\n      case \"Custom Software Development\":\r\n        // @ts-ignore\r\n        setQuestions(softwareQuestions);\r\n        // @ts-ignore\r\n        setService(newSelected.title);\r\n        setPlatforms([]);\r\n        setFeatures([]);\r\n        setCustomFeatures(\"\");\r\n        setCategory(\"\");\r\n        setUsers(\"\");\r\n        break;\r\n      case \"iOS/Android App Development\":\r\n        // @ts-ignore\r\n        setQuestions(softwareQuestions);\r\n        // @ts-ignore\r\n        setService(newSelected.title);\r\n        setPlatforms([]);\r\n        setFeatures([]);\r\n        setCustomFeatures(\"\");\r\n        setCategory(\"\");\r\n        setUsers(\"\");\r\n        break;\r\n      case \"Website Development\":\r\n        // @ts-ignore\r\n        setQuestions(websiteQuestions);\r\n        // @ts-ignore\r\n        setService(newSelected.title);\r\n        setPlatforms([]);\r\n        setFeatures([]);\r\n        setCustomFeatures(\"\");\r\n        setCategory(\"\");\r\n        setUsers(\"\");\r\n        break;\r\n      default:\r\n        setQuestions(newQuestions);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onChange = (e: any) => {\r\n    let valid;\r\n    switch (e.target.id) {\r\n      case \"email\":\r\n        setEmail(e.target.value);\r\n        valid = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+/.test(\r\n          e.target.value\r\n        );\r\n        if (!valid) {\r\n          setEmailHelper(\"Invalid email\");\r\n        } else {\r\n          setEmailHelper(\"\");\r\n        }\r\n        break;\r\n      case \"name\":\r\n        setName(e.target.value);\r\n        break;\r\n      case \"phone\":\r\n        setPhone(e.target.value);\r\n        valid = /^\\(?([0-9]{3})\\)?[-.]?([0-9]{3})[-.]?([0-9]{4})$/.test(\r\n          e.target.value\r\n        );\r\n        if (!valid) {\r\n          setPhoneHelper(\"Invalid phone\");\r\n        } else {\r\n          setPhoneHelper(\"\");\r\n        }\r\n        break;\r\n      case \"message\":\r\n        setMessage(e.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const getTotal = () => {\r\n    let cost = 0;\r\n    const selections = questions\r\n      .map((q) => q.options.filter((o) => o.selected))\r\n      .filter((question) => question.length > 0);\r\n\r\n    selections.map((options) => options.map((option) => (cost += option.cost)));\r\n\r\n    if (questions.length > 2) {\r\n      const userCost = questions\r\n        .filter(\r\n          (question) => question.title === \"How many users do you expect?\"\r\n        )\r\n        .map((question) =>\r\n          question.options.filter((option) => option.selected)\r\n        )[0][0];\r\n\r\n      setUsers(userCost.title);\r\n\r\n      cost -= userCost.cost;\r\n      cost *= userCost.cost;\r\n    }\r\n    setTotal(cost);\r\n    console.log(cost);\r\n  };\r\n\r\n  const getPlatforms = () => {\r\n    let newPlatforms: any[] = [];\r\n    if (questions.length > 2) {\r\n      questions\r\n        .filter(\r\n          (question) =>\r\n            question.title === \"Which platforms do you need supported?\"\r\n        )\r\n        .map((question) =>\r\n          question.options.filter((option) => option.selected)\r\n        )[0]\r\n        .map((option) => newPlatforms.push(option.title));\r\n      // @ts-ignore\r\n      setPlatforms(newPlatforms);\r\n    }\r\n  };\r\n\r\n  const getFeatures = () => {\r\n    let newFeatures: any[] = [];\r\n    if (questions.length > 2) {\r\n      questions\r\n        .filter(\r\n          (question) =>\r\n            question.title === \"Which features do you expect to use?\"\r\n        )\r\n        .map((question) => question.options.filter((option) => option.selected))\r\n        .map((option) =>\r\n          option.map((newFeature) => newFeatures.push(newFeature.title))\r\n        );\r\n      // @ts-ignore\r\n      setFeatures(newFeatures);\r\n    }\r\n  };\r\n\r\n  const getCustomFeatures = () => {\r\n    if (questions.length > 2) {\r\n      const newCustomFeatures = questions\r\n        .filter(\r\n          (question) =>\r\n            question.title ===\r\n            \"What type of custom features do you expect to need?\"\r\n        )\r\n        .map((question) =>\r\n          question.options.filter((option) => option.selected)\r\n        )[0][0].title;\r\n\r\n      setCustomFeatures(newCustomFeatures);\r\n    }\r\n  };\r\n\r\n  const getCategory = () => {\r\n    if (questions.length === 2) {\r\n      const newCategory = questions\r\n        .filter(\r\n          (question) =>\r\n            question.title === \"Which type of website are you wanting?\"\r\n        )[0]\r\n        .options.filter((option) => option.selected)[0].title;\r\n\r\n      console.log(newCategory);\r\n\r\n      setCategory(newCategory);\r\n    }\r\n  };\r\n\r\n  const softwareSelection = (\r\n    <Grid container direction=\"column\">\r\n      <Grid\r\n        item\r\n        container\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: \"1.25em\" }}\r\n      >\r\n        <Grid item xs={2}>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"body1\">\r\n            You want {service}\r\n            {platforms.length > 0\r\n              ? `for ${\r\n                  //if only web application is selected...\r\n                  //@ts-ignore\r\n                  platforms.indexOf(\"Web Application\") > -1 &&\r\n                  platforms.length === 1\r\n                    ? //then finish sentence here\r\n                      \"a Web Application.\"\r\n                    : //otherwise, if web application and another platform is selected...\r\n                    //@ts-ignore\r\n                    platforms.indexOf(\"Web Application\") > -1 &&\r\n                      platforms.length === 2\r\n                    ? //then finish the sentence here\r\n                      `a Web Application and an ${platforms[1]}.`\r\n                    : //otherwise, if only one platform is selected which isn't web application...\r\n                    platforms.length === 1\r\n                    ? //then finish the sentence here\r\n                      `an ${platforms[0]}`\r\n                    : //otherwise, if other two options are selected...\r\n                    platforms.length === 2\r\n                    ? //then finish the sentence here\r\n                      \"an iOS Application and an Android Application.\"\r\n                    : //otherwise if all three are selected...\r\n                    platforms.length === 3\r\n                    ? //then finish the sentence here\r\n                      \"a Web Application, an iOS Application, and an Android Application.\"\r\n                    : null\r\n                }`\r\n              : null}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        alignItems=\"center\"\r\n        style={{ marginBottom: \"1.25em\" }}\r\n      >\r\n        <Grid item xs={2}>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"body1\">\r\n            {\"with \"}\r\n            {/* if we have features... */}\r\n            {features.length > 0\r\n              ? //...and there's only 1...\r\n                features.length === 1\r\n                ? //then end the sentence here\r\n                  `${features[0]}.`\r\n                : //otherwise, if there are two features...\r\n                features.length === 2\r\n                ? //...then end the sentence here\r\n                  `${features[0]} and ${features[1]}.`\r\n                : //otherwise, if there are three or more features...\r\n                  features\r\n                    //filter out the very last feature...\r\n                    .filter((feature, index) => index !== features.length - 1)\r\n                    //and for those features return their name...\r\n                    .map((feature, index) => (\r\n                      <span key={index}>{`${feature}, `}</span>\r\n                    ))\r\n              : null}\r\n            {features.length > 2\r\n              ? //...and then finally add the last feature with 'and' in front of it\r\n                ` and ${features[features.length - 1]}.`\r\n              : null}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item container alignItems=\"center\">\r\n        <Grid item>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"body1\">\r\n            The custom features will be of {customFeatures.toLowerCase()}\r\n            {`, and the project will be used by about ${users} users.`}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n\r\n  const websiteSelection = (\r\n    <Grid container direction=\"column\" style={{ marginTop: \"14em\" }}>\r\n      <Grid item container alignItems=\"center\">\r\n        <Grid item xs={2}>\r\n          <img src={check} alt=\"checkmark\" />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          <Typography variant=\"body1\">\r\n            You want{\" \"}\r\n            {category === \"Basic\"\r\n              ? \"a Basic Website\"\r\n              : `an ${category} Website.`}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n\r\n  const estimateDisabled = () => {\r\n    let disabled = true;\r\n    const emptySelections = questions\r\n      .map((question) => question.options.filter((option) => option.selected))\r\n      .filter((question) => question.length === 0);\r\n\r\n    if (questions.length === 2) {\r\n      if (emptySelections.length === 1) {\r\n        disabled = false;\r\n      }\r\n    } else if (questions.length === 1) {\r\n      disabled = true;\r\n    } else if (\r\n      emptySelections.length < 3 &&\r\n      questions[questions.length - 1].options.filter(\r\n        (option) => option.selected\r\n      ).length > 0\r\n    ) {\r\n      disabled = false;\r\n    }\r\n\r\n    return disabled;\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"row\">\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"column\"\r\n        lg\r\n        alignItems={matchesMD ? \"center\" : undefined}\r\n      >\r\n        <Grid\r\n          item\r\n          style={{ marginTop: \"2em\", marginLeft: matchesMD ? 0 : \"5em\" }}\r\n        >\r\n          <Typography variant=\"h2\" align={matchesMD ? \"center\" : undefined}>\r\n            Estimate\r\n          </Typography>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          style={{\r\n            marginRight: matchesMD ? 0 : \"10em\",\r\n            maxWidth: \"50em\",\r\n            marginTop: \"7.5em\",\r\n          }}\r\n        >\r\n          <Lottie options={defaultOptions} height=\"100%\" width=\"100%\" />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        lg\r\n        style={{ marginRight: matchesMD ? 0 : \"2em\", marginBottom: \"25em\" }}\r\n      >\r\n        {questions\r\n          .filter((question) => question.active)\r\n          .map((q, i) => (\r\n            <React.Fragment key={i}>\r\n              <Grid item>\r\n                <Typography\r\n                  variant=\"h2\"\r\n                  align=\"center\"\r\n                  style={{\r\n                    fontWeight: 500,\r\n                    fontSize: \"2.25em\",\r\n                    marginTop: \"5em\",\r\n                    marginLeft: matchesSM ? \"1em\" : 0,\r\n                    marginRight: matchesSM ? \"1em\" : 0,\r\n                    lineHeight: 1.25,\r\n                  }}\r\n                >\r\n                  {q.title}\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  align=\"center\"\r\n                  style={{ marginBottom: \"2.5em\" }}\r\n                  gutterBottom\r\n                >\r\n                  {q.subtitle}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item container>\r\n                {/* @ts-ignore */}\r\n                {q.options.map((option, i) => (\r\n                  <Grid\r\n                    key={i}\r\n                    item\r\n                    container\r\n                    direction=\"column\"\r\n                    component={Button}\r\n                    onClick={() => handleSelect(option.id)}\r\n                    style={{\r\n                      display: \"grid\",\r\n                      textTransform: \"none\",\r\n                      borderRadius: 0,\r\n                      marginBottom: matchesSM ? \"1.5em\" : 0,\r\n                      backgroundColor: option.selected\r\n                        ? // @ts-ignore\r\n                          theme.palette.common.orange\r\n                        : null,\r\n                    }}\r\n                    md\r\n                  >\r\n                    <Grid item style={{ maxWidth: \"14em\" }}>\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        align=\"center\"\r\n                        style={{ marginBottom: \"1em\" }}\r\n                      >\r\n                        {option.title}\r\n                      </Typography>\r\n                      <Typography variant=\"caption\" align=\"center\">\r\n                        {option.subtitle}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <img\r\n                        src={option.icon}\r\n                        alt={option.iconAlt}\r\n                        className={classes.icon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                ))}\r\n              </Grid>\r\n            </React.Fragment>\r\n          ))}\r\n\r\n        <Grid\r\n          item\r\n          container\r\n          justify=\"space-between\"\r\n          style={{ width: \"18em\", marginTop: \"3em\" }}\r\n        >\r\n          <Grid item>\r\n            <IconButton\r\n              disabled={navigationPreviousDisable()}\r\n              onClick={previousQuestion}\r\n            >\r\n              <img\r\n                src={\r\n                  navigationPreviousDisable() ? backArrowDisabled : backArrow\r\n                }\r\n                alt=\"previous question\"\r\n              />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton\r\n              disabled={navigationNextDisable()}\r\n              onClick={nextQuestion}\r\n            >\r\n              <img\r\n                src={\r\n                  navigationNextDisable() ? forwardArrowDisabled : forwardArrow\r\n                }\r\n                alt=\"next question\"\r\n              />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            onClick={() => {\r\n              setDialogOpen(true);\r\n              getTotal();\r\n              getPlatforms();\r\n              getFeatures();\r\n              getCustomFeatures();\r\n              getCategory();\r\n            }}\r\n            variant=\"contained\"\r\n            className={classes.estimateButton}\r\n            disabled={estimateDisabled()}\r\n          >\r\n            Get Estimate\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Dialog\r\n        fullWidth\r\n        fullScreen={matchesSM}\r\n        maxWidth=\"lg\"\r\n        style={{ zIndex: 1302 }}\r\n        open={dialogOpen}\r\n        onClose={() => {\r\n          setDialogOpen(false);\r\n        }}\r\n      >\r\n        <Grid container justify=\"center\">\r\n          <Grid item style={{ marginTop: \"1em\", marginBottom: \"1em\" }}>\r\n            <Typography variant=\"h2\" align=\"center\">\r\n              Estimate\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <DialogContent>\r\n          <Grid\r\n            container\r\n            justify=\"space-around\"\r\n            direction={matchesSM ? \"column\" : \"row\"}\r\n            alignItems={matchesMD ? \"center\" : undefined}\r\n          >\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              md={7}\r\n              style={{ maxWidth: \"20em\" }}\r\n            >\r\n              <Grid item>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  id=\"name\"\r\n                  fullWidth\r\n                  value={name}\r\n                  onChange={onChange}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  error={emailHelper.length !== 0}\r\n                  helperText={emailHelper}\r\n                  fullWidth\r\n                  label=\"Email\"\r\n                  id=\"email\"\r\n                  value={email}\r\n                  onChange={onChange}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <TextField\r\n                  error={phoneHelper.length !== 0}\r\n                  helperText={phoneHelper}\r\n                  fullWidth\r\n                  label=\"Phone\"\r\n                  id=\"phone\"\r\n                  value={phone}\r\n                  onChange={onChange}\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ maxWidth: matchesXS ? \"100%\" : \"20em\" }}>\r\n                <TextField\r\n                  id=\"message\"\r\n                  InputProps={{\r\n                    disableUnderline: true,\r\n                  }}\r\n                  className={classes.message}\r\n                  value={message}\r\n                  multiline\r\n                  fullWidth\r\n                  rows={10}\r\n                  onChange={onChange}\r\n                  placeholder=\"Please tell us more about your project\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  align={matchesSM ? \"center\" : undefined}\r\n                  paragraph\r\n                  style={{ lineHeight: 1.1 }}\r\n                >\r\n                  We can create this digital solution for an estimated{\" \"}\r\n                  <span className={classes.specialText}>\r\n                    ${total.toFixed(2)}\r\n                  </span>\r\n                </Typography>\r\n                <Typography\r\n                  variant=\"body1\"\r\n                  align={matchesSM ? \"center\" : undefined}\r\n                  paragraph\r\n                >\r\n                  Fill out your name,phone number, and email. place your\r\n                  request, and we'll get back to you with details moving forward\r\n                  and a final price.\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              md={5}\r\n              style={{ maxWidth: \"30em\" }}\r\n              alignItems={matchesSM ? \"center\" : undefined}\r\n            >\r\n              <Hidden smDown>\r\n                <Grid item>\r\n                  {questions.length > 2 ? softwareSelection : websiteSelection}\r\n                </Grid>\r\n              </Hidden>\r\n              <Grid item>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className={classes.estimateButton}\r\n                  disabled={\r\n                    name.length === 0 ||\r\n                    message.length === 0 ||\r\n                    phoneHelper.length !== 0 ||\r\n                    emailHelper.length !== 0\r\n                  }\r\n                >\r\n                  Place Request\r\n                  <img\r\n                    src={send}\r\n                    alt=\"paper airplane\"\r\n                    style={{ marginLeft: \"0.5em\" }}\r\n                  />\r\n                </Button>\r\n              </Grid>\r\n              <Hidden mdUp>\r\n                <Grid item style={{ marginBottom: matchesSM ? \"5em\" : 0 }}>\r\n                  <Button\r\n                    style={{ fontWeight: 300 }}\r\n                    color=\"primary\"\r\n                    onClick={() => setDialogOpen(false)}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                </Grid>\r\n              </Hidden>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Grid>\r\n  );\r\n}\r\n",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":83,"column":21,"nodeType":"99","messageId":"100","endLine":83,"endColumn":37},{"ruleId":"97","severity":1,"message":"101","line":13,"column":8,"nodeType":"99","messageId":"100","endLine":13,"endColumn":19},{"ruleId":"97","severity":1,"message":"102","line":15,"column":8,"nodeType":"99","messageId":"100","endLine":15,"endColumn":12},{"ruleId":"97","severity":1,"message":"103","line":16,"column":8,"nodeType":"99","messageId":"100","endLine":16,"endColumn":19},{"ruleId":"97","severity":1,"message":"104","line":17,"column":8,"nodeType":"99","messageId":"100","endLine":17,"endColumn":20},{"ruleId":"97","severity":1,"message":"105","line":18,"column":10,"nodeType":"99","messageId":"100","endLine":18,"endColumn":14},{"ruleId":"97","severity":1,"message":"106","line":335,"column":11,"nodeType":"99","messageId":"100","endLine":335,"endColumn":19},{"ruleId":"97","severity":1,"message":"98","line":335,"column":21,"nodeType":"99","messageId":"100","endLine":335,"endColumn":37},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"@typescript-eslint/no-unused-vars","'setSelectedIndex' is assigned a value but never used.","Identifier","unusedVar","'ButtonArrow' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'CallToAction' is defined but never used.","'Link' is defined but never used.","'setValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]